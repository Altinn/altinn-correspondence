using Altinn.Correspondence.Application;
using Altinn.Correspondence.Application.MalwareScanResultCommand.Models;
using Altinn.Correspondence.Core.Models.Enums;
using Altinn.Correspondence.Core.Repositories;
using Microsoft.Extensions.Logging;
using OneOf;
using System.Text.Json;

namespace Altinn.Broker.Application;
public class MalwareScanResultCommandHandler(
    IAttachmentRepository attachmentRepository,
    IAttachmentStatusRepository attachmentStatusRepository,
    ILogger<MalwareScanResultCommandHandler> logger) : IHandler<ScanResultData, Task>
{
    private readonly IAttachmentRepository _attachmentRepository = attachmentRepository;
    private readonly IAttachmentStatusRepository _attachmentStatusRepository = attachmentStatusRepository;
    private readonly ILogger<MalwareScanResultCommandHandler> _logger = logger;

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string attachmentIdFromBlobUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid attachmentId;
        if (!Guid.TryParse(attachmentIdFromBlobUri, out attachmentId))
        {
            _logger.LogError("Could not parse Guid from {fileTransferIdFromUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }
        var attachment = await _attachmentRepository.GetAttachmentByUrl(data.BlobUri, cancellationToken);
        if (attachment is null)
        {
            _logger.LogError("Could not parse Guid from {fileTransferIdFromUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }

        if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new Correspondence.Core.Models.AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Published,
                StatusChanged = DateTime.UtcNow,
                StatusText = AttachmentStatus.Published.ToString()
            }, cancellationToken);
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            return Task.CompletedTask;
        } else
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new Correspondence.Core.Models.AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Failed,
                StatusChanged = DateTime.UtcNow,
                StatusText = $"Malware scan failed: {data.ScanResultType}: {data.ScanResultDetails}"
            }, cancellationToken);
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            return Task.CompletedTask;
        }

        _logger.LogWarning("Suspicious scan result for file transfer {fileTransferId} with body {body}", attachmentId, JsonSerializer.Serialize(data));
        return Task.CompletedTask;
    }
}
