using Altinn.Correspondence.Application.Helpers;
using Altinn.Correspondence.Application.MalwareScanResult.Models;
using Altinn.Correspondence.Core.Models.Entities;
using Altinn.Correspondence.Core.Models.Enums;
using Altinn.Correspondence.Core.Repositories;
using Altinn.Correspondence.Core.Services;
using Altinn.Correspondence.Core.Services.Enums;
using Hangfire;
using Hangfire.Storage;
using Microsoft.Extensions.Logging;
using OneOf;
using System.Security.Claims;

namespace Altinn.Correspondence.Application;

public class MalwareScanResultHandler(
    IAltinnRegisterService altinnRegisterService,
    IAttachmentRepository attachmentRepository,
    IAttachmentStatusRepository attachmentStatusRepository,
    ICorrespondenceRepository correspondenceRepository,
    ICorrespondenceStatusRepository correspondenceStatusRepository,
    UserClaimsHelper userClaimsHelper,
    IBackgroundJobClient backgroundJobClient,
    HangfireScheduleHelper hangfireScheduleHelper,
    ILogger<MalwareScanResultHandler> logger) : IHandler<ScanResultData, Task>
{
    private const string WaitForAttachmentsJobIdPrefix = "wait-attachments-";
    
    private const int MaxWaitTimeMinutes = 3;
    private const int WaitForAttachmentsIntervalMinutes = 1;

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, ClaimsPrincipal? user, CancellationToken cancellationToken)
    {
        string attachmentIdFromBlobUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid attachmentId;
        if (!Guid.TryParse(attachmentIdFromBlobUri, out attachmentId))
        {
            logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return AttachmentErrors.AttachmentNotFound;
        }
        var attachment = await attachmentRepository.GetAttachmentByUrl(data.BlobUri, cancellationToken);
        if (attachment is null)
        {
            logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return AttachmentErrors.AttachmentNotFound;
        }
        var party = await altinnRegisterService.LookUpPartyById(attachment.Sender, cancellationToken);
        if (party?.PartyUuid is not Guid partyUuid)
        {
            return AuthorizationErrors.CouldNotFindPartyUuid;
        }

        if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
        {
            return await TransactionWithRetriesPolicy.Execute<Task>(async (cancellationToken) =>
            {
                await attachmentStatusRepository.AddAttachmentStatus(new AttachmentStatusEntity()
                {
                    Attachment = attachment,
                    AttachmentId = attachmentId,
                    Status = AttachmentStatus.Published,
                    StatusChanged = DateTimeOffset.UtcNow,
                    StatusText = AttachmentStatus.Published.ToString(),
                    PartyUuid = partyUuid
                }, cancellationToken);
                backgroundJobClient.Enqueue<IEventBus>((eventBus) => eventBus.Publish(AltinnEventType.AttachmentPublished, attachment.ResourceId, attachmentIdFromBlobUri, "Attachment Published", attachment.Sender, CancellationToken.None));
                logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
                backgroundJobClient.Enqueue(() => CheckCorrespondenceStatusesAfterDeleteAndPublish(attachmentId, partyUuid, CancellationToken.None));
                return Task.CompletedTask;
            }, logger, cancellationToken);
        }
        else
        {
            return await TransactionWithRetriesPolicy.Execute<Task>(async (cancellationToken) =>
            {
                await attachmentStatusRepository.AddAttachmentStatus(new AttachmentStatusEntity()
                {
                    Attachment = attachment,
                    AttachmentId = attachmentId,
                    Status = AttachmentStatus.Failed,
                    StatusChanged = DateTimeOffset.UtcNow,
                    StatusText = $"Malware scan failed: {data.ScanResultType}: {data.ScanResultDetails}",
                    PartyUuid = partyUuid
                }, cancellationToken);
                backgroundJobClient.Enqueue<IEventBus>((eventBus) => eventBus.Publish(AltinnEventType.AttachmentUploadFailed, attachment.ResourceId, attachmentIdFromBlobUri, "Malware scan", attachment.Sender, CancellationToken.None));
                logger.LogWarning("Malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
                return Task.CompletedTask;
            }, logger, cancellationToken);
        }
    }

    public async Task CheckCorrespondenceStatusesAfterDeleteAndPublish(Guid attachmentId, Guid partyUuid, CancellationToken cancellationToken)
    {
        var attachment = await attachmentRepository.GetAttachmentById(attachmentId, true, cancellationToken);
        if (attachment == null)
        {
            throw new Exception($"Attachment {attachmentId} not found");
        }

        var correspondences = await correspondenceRepository.GetNonPublishedCorrespondencesByAttachmentId(attachment.Id, cancellationToken);
        if (correspondences.Count == 0)
        {
            logger.LogInformation("No correspondences associated with that attachmentId was found");
            return;
        }

        foreach (var correspondence in correspondences)
        {
            DateTimeOffset startTime = DateTimeOffset.UtcNow;

            var jobId = $"{WaitForAttachmentsJobIdPrefix}{correspondence.Id}";
            
            RecurringJob.AddOrUpdate(
                jobId, 
                () => WaitForAllAttachmentsAndPublish(correspondence, startTime, CancellationToken.None), 
                $"*/{WaitForAttachmentsIntervalMinutes} * * * *",
                new RecurringJobOptions { TimeZone = TimeZoneInfo.Utc });

            RecurringJob.TriggerJob(jobId);
        }
    }

    public async Task WaitForAllAttachmentsAndPublish(CorrespondenceEntity correspondence, DateTimeOffset startTime, CancellationToken cancellationToken)
    {
        string jobId = $"{WaitForAttachmentsJobIdPrefix}{correspondence.Id}";

        if (await correspondenceRepository.AreAllAttachmentsPublished(correspondence.Id, cancellationToken))
        {
            logger.LogInformation("All attachments are published for correspondence {correspondenceId}, scheduling publish", correspondence.Id);

            await hangfireScheduleHelper.SchedulePublishAfterDialogCreated(correspondence, cancellationToken);

            RecurringJob.RemoveIfExists(jobId);
        }
        else
        {
            TimeSpan waitTime = DateTimeOffset.UtcNow - startTime;
            if (waitTime.TotalMinutes > MaxWaitTimeMinutes)
            {
                logger.LogWarning("Timeout exceeded waiting for attachments for correspondence {correspondenceId}. Waited for {minutes} minutes which exceeds the {maxMinutes} minute limit", 
                    correspondence.Id, waitTime.TotalMinutes, MaxWaitTimeMinutes);
                
                RecurringJob.RemoveIfExists(jobId);
                return;
            }
            logger.LogInformation("Not all attachments are published for correspondence {correspondenceId}, will check again on next schedule", correspondence.Id);
        }
    }
}