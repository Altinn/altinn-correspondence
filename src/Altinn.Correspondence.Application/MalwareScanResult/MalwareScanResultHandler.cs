using Altinn.Correspondence.Application.Helpers;
using Altinn.Correspondence.Application.MalwareScanResult.Models;
using Altinn.Correspondence.Core.Models.Entities;
using Altinn.Correspondence.Core.Models.Enums;
using Altinn.Correspondence.Core.Repositories;
using Altinn.Correspondence.Core.Services;
using Altinn.Correspondence.Core.Services.Enums;
using Altinn.Correspondence.Persistence.Repositories;
using Microsoft.Extensions.Logging;
using OneOf;

namespace Altinn.Correspondence.Application;

public class MalwareScanResultHandler(
    IAttachmentRepository attachmentRepository,
    IAttachmentStatusRepository attachmentStatusRepository,
    IEventBus eventBus,
    UploadHelper uploadHelper,
    ICorrespondenceRepository correspondenceRepository,
    ICorrespondenceStatusRepository correspondenceStatusRepository,
    ILogger<MalwareScanResultHandler> logger) : IHandler<ScanResultData, Task>
{
    private readonly IAttachmentRepository _attachmentRepository = attachmentRepository;
    private readonly IAttachmentStatusRepository _attachmentStatusRepository = attachmentStatusRepository;
    private readonly UploadHelper _uploadHelper = uploadHelper;
    private readonly ILogger<MalwareScanResultHandler> _logger = logger;
    private readonly IEventBus _eventBus = eventBus;

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string attachmentIdFromBlobUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid attachmentId;
        if (!Guid.TryParse(attachmentIdFromBlobUri, out attachmentId))
        {
            _logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }
        var attachment = await _attachmentRepository.GetAttachmentByUrl(data.BlobUri, cancellationToken);
        if (attachment is null)
        {
            _logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }

        if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Published,
                StatusChanged = DateTime.UtcNow,
                StatusText = AttachmentStatus.Published.ToString()
            }, cancellationToken);
            await _eventBus.Publish(AltinnEventType.AttachmentPublished, attachment.ResourceId, attachmentIdFromBlobUri, "Attachment Published", attachment.SendersReference, cancellationToken);
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            return Task.CompletedTask;
        }
        else
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Failed,
                StatusChanged = DateTime.UtcNow,
                StatusText = $"Malware scan failed: {data.ScanResultType}: {data.ScanResultDetails}"
            }, cancellationToken);
            await _eventBus.Publish(AltinnEventType.AttachmentUploadFailed, attachment.ResourceId, attachmentIdFromBlobUri, "Malware scan", attachment.SendersReference, cancellationToken);
            _logger.LogWarning("Malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            return Task.CompletedTask;
        }
    }

    public async Task CheckCorrespondenceStatusesAfterDeleteAndPublish(Guid attachmentId, CancellationToken cancellationToken)
    {
        var attachment = await _attachmentRepository.GetAttachmentById(attachmentId, true, cancellationToken);
        if (attachment == null)
        {
            return;
        }

        var correspondences = await correspondenceRepository.GetNonPublishedCorrespondencesByAttachmentId(attachment.Id, cancellationToken);
        if (correspondences.Count == 0)
        {
            return;
        }

        var list = new List<CorrespondenceStatusEntity>();
        foreach (var correspondenceId in correspondences)
        {
            list.Add(
                new CorrespondenceStatusEntity
                {
                    CorrespondenceId = correspondenceId,
                    Status = CorrespondenceStatus.Published,
                    StatusChanged = DateTime.UtcNow,
                    StatusText = CorrespondenceStatus.Published.ToString()
                }
            );
        }
        await correspondenceStatusRepository.AddCorrespondenceStatuses(list, cancellationToken);
        return;
    }
}
