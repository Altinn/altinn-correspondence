using Altinn.Correspondence.Application.Helpers;
using Altinn.Correspondence.Application.MalwareScanResult.Models;
using Altinn.Correspondence.Core.Models.Enums;
using Altinn.Correspondence.Core.Repositories;
using Altinn.Correspondence.Core.Services;
using Altinn.Correspondence.Core.Services.Enums;
using Altinn.Correspondence.Persistence.Repositories;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Hosting.Internal;
using Microsoft.Extensions.Logging;
using OneOf;

namespace Altinn.Correspondence.Application;

public class MalwareScanResultHandler(
    IAttachmentRepository attachmentRepository,
    IAttachmentStatusRepository attachmentStatusRepository,
    ICorrespondenceRepository correspondenceRepository,
    ICorrespondenceStatusRepository correspondenceStatusRepository,
    IHostEnvironment hostEnvironment,
    IStorageRepository storageRepository,
    IEventBus eventBus,
    ILogger<MalwareScanResultHandler> logger) : IHandler<ScanResultData, Task>
{
    private readonly IAttachmentRepository _attachmentRepository = attachmentRepository;
    private readonly IAttachmentStatusRepository _attachmentStatusRepository = attachmentStatusRepository;
    private readonly ICorrespondenceRepository _correspondenceRepository = correspondenceRepository;
    private readonly ICorrespondenceStatusRepository _correspondenceStatusRepository = correspondenceStatusRepository;
    private readonly IHostEnvironment _hostEnvironment = hostEnvironment;
    private readonly IStorageRepository _storageRepository = storageRepository;
    private readonly ILogger<MalwareScanResultHandler> _logger = logger;
    private readonly IEventBus _eventBus = eventBus;

    public async Task<OneOf<Task, Error>> Process(ScanResultData data, CancellationToken cancellationToken)
    {
        string attachmentIdFromBlobUri = data.BlobUri.Split("/").Last() ?? Guid.Empty.ToString();
        Guid attachmentId;
        if (!Guid.TryParse(attachmentIdFromBlobUri, out attachmentId))
        {
            _logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }
        var attachment = await _attachmentRepository.GetAttachmentByUrl(data.BlobUri, cancellationToken);
        if (attachment is null)
        {
            _logger.LogError("Could not parse Guid from {attachmentIdFromBlobUri}", attachmentIdFromBlobUri);
            return Errors.AttachmentNotFound;
        }

        if (data.ScanResultType.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase))
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new Correspondence.Core.Models.AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Published,
                StatusChanged = DateTime.UtcNow,
                StatusText = AttachmentStatus.Published.ToString()
            }, cancellationToken);
            await _eventBus.Publish(AltinnEventType.AttachmentPublished, attachment.ResourceId, attachmentIdFromBlobUri, "Attachment Published", attachment.SendersReference, cancellationToken);
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            UploadHelper uploadHelper = new UploadHelper(_correspondenceRepository, _correspondenceStatusRepository, _attachmentStatusRepository, _attachmentRepository, _storageRepository, _hostEnvironment);
            await uploadHelper.CheckCorrespondenceStatusesAfterUploadAndPublish(attachment.Id, cancellationToken);
            return Task.CompletedTask;
        }
        else
        {
            await _attachmentStatusRepository.AddAttachmentStatus(new Correspondence.Core.Models.AttachmentStatusEntity()
            {
                Attachment = attachment,
                AttachmentId = attachmentId,
                Status = AttachmentStatus.Failed,
                StatusChanged = DateTime.UtcNow,
                StatusText = $"Malware scan failed: {data.ScanResultType}: {data.ScanResultDetails}"
            }, cancellationToken);
            await _eventBus.Publish(AltinnEventType.AttachmentUploadFailed, attachment.ResourceId, attachmentIdFromBlobUri, "Malware scan", attachment.SendersReference, cancellationToken);
            _logger.LogInformation("Non-malicious result for {fileTransferId} with result type {scanResultType}", attachmentId, data.ScanResultType);
            return Task.CompletedTask;
        }
    }
}
