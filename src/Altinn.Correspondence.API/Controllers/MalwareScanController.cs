using Altinn.Broker.Application;
using Altinn.Correspondence.Application;
using Altinn.Correspondence.Application.MalwareScanResultCommand.Models;
using Azure.Messaging.EventGrid;
using Azure.Messaging.EventGrid.SystemEvents;
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace Altinn.Correspondence.API.Controllers
{
    [ApiController]
    [Route("correspondence/api/v1/webhooks/malwarescanresults")]
    public class MalwareScanResultsController(/*IIdempotencyEventRepository idempotencyEventRepository, */ILogger<MalwareScanResultsController> logger) : Controller
    {
        //private readonly IIdempotencyEventRepository _idempotencyEventRepository;
        private readonly ILogger<MalwareScanResultsController> _logger = logger;
        private const string malwareScanEventType = "Microsoft.Security.MalwareScanningResult";

        [HttpPost]
        [Consumes("application/json")]
        public async Task<ActionResult> ProcessMalwareScanResult([FromBody] JsonElement eventGridEventJson, [FromServices] MalwareScanResultCommandHandler handler, CancellationToken cancellationToken)
        {
            try
            {
                if (eventGridEventJson.ValueKind == JsonValueKind.Object)
                {
                    var eventGridEvent = JsonSerializer.Deserialize<EventGridEvent>(eventGridEventJson.GetRawText());
                    if (eventGridEvent != null)
                    {
                        return await ProcessSingleEvent(eventGridEvent, handler, cancellationToken);
                    }
                }
                else if (eventGridEventJson.ValueKind == JsonValueKind.Array)
                {
                    // Subscription validation event is sent as an array of a single event
                    var eventGridEvents = JsonSerializer.Deserialize<EventGridEvent[]>(eventGridEventJson.GetRawText());
                    var eventGridEvent = eventGridEvents?.FirstOrDefault();
                    if (eventGridEvents?.Length == 0 || eventGridEvent is null)
                    {
                        _logger.LogError("Unexpected array of event grid events. Expected a single event. {json}", eventGridEventJson.GetRawText());
                        return BadRequest("Unexpected array of event grid events. Expected a single event.");
                    }
                    return await ProcessSingleEvent(eventGridEvent, handler, cancellationToken);
                }
                _logger.LogError("Invalid event data format");
                return BadRequest("Invalid event data format");
            }
            catch (JsonException ex)
            {
                _logger.LogError(ex, "Failed to deserialize event data");
                return BadRequest("Failed to deserialize event data");
            }
        }

        private async Task<ActionResult> ProcessSingleEvent(
            EventGridEvent eventGridEvent,
            MalwareScanResultCommandHandler handler,
            CancellationToken cancellationToken)
        {
            _logger.LogInformation("Got malware scan event of type {EventType} with data: {eventData}", eventGridEvent.EventType, eventGridEvent.Data.ToString());
            if (eventGridEvent.TryGetSystemEventData(out object eventData)
                && eventData is SubscriptionValidationEventData subscriptionValidationEventData)
            {
                return new OkObjectResult(new
                {
                    ValidationResponse = subscriptionValidationEventData.ValidationCode
                });
            }
            else if (eventGridEvent.EventType == malwareScanEventType)
            {
                _logger.LogInformation("Got malware scan result data: {MalwareScanResultData}", eventGridEvent.Data.ToString());
                ScanResultData? result = JsonSerializer.Deserialize<ScanResultData>(eventGridEvent.Data.ToString());
                if (result is null)
                {
                    _logger.LogError("Failed to deserialize malware scan result data");
                    return BadRequest();
                }
                var commandResult = await handler.Process(result, cancellationToken);
                return commandResult.Match(
                    Ok,
                    Problem
                );
            }
            else
            {
                _logger.LogError("Got unknown event: {EventData}", eventData.ToString());
                return BadRequest();
            }
        }
        private ObjectResult Problem(Error error) => Problem(detail: error.Message, statusCode: (int)error.StatusCode);
    }
}
