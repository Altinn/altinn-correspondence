using Altinn.Correspondence.Application;
using Azure.Messaging.EventGrid;
using Azure.Messaging.EventGrid.SystemEvents;
using Microsoft.AspNetCore.Mvc;

namespace Altinn.Correspondence.API.Controllers
{
    [ApiController]
    [Route("correspondence/api/v1/malwarescanresults")]
    public class MalwareScanResultsController(/*IIdempotencyEventRepository idempotencyEventRepository, */ILogger<MalwareScanResultsController> logger) : Controller
    {
        //private readonly IIdempotencyEventRepository _idempotencyEventRepository;
        private readonly ILogger<MalwareScanResultsController> _logger = logger;

        [HttpPost]
        [Consumes("application/json")]
        public async Task<ActionResult> ProcessMalwareScanResult(/*[FromServices] MalwareScanningResultHandler handler, */CancellationToken cancellationToken)
        {
            BinaryData events = await BinaryData.FromStreamAsync(Request.Body);
            EventGridEvent[] eventGridEvents = EventGridEvent.ParseMany(events);
            foreach (EventGridEvent eventGridEvent in eventGridEvents)
            {
                _logger.LogInformation("Got malware scan event of type {EventType} with data: {eventData}", eventGridEvent.EventType, eventGridEvent.Data.ToString());
                if (eventGridEvent.TryGetSystemEventData(out object eventData))
                {
                    if (eventData is SubscriptionValidationEventData subscriptionValidationEventData)
                    {
                        // TODO: validate that eventGridEvent WebHook subscription is actually from an Altinn Azure Defender EventGrid
                        var responseData = new
                        {
                            ValidationResponse = subscriptionValidationEventData.ValidationCode
                        };
                        return new OkObjectResult(responseData);
                    }
                }
                else if (eventGridEvent.EventType == "Microsoft.Security.MalwareScanningResult")
                {
                    string jsonString = eventGridEvent.Data.ToString();
                    _logger.LogInformation("Got malware scan result data: {MalwareScanResultData}", jsonString);
                    /*ScanResultData? result = JsonConvert.DeserializeObject<ScanResultData>(jsonString);
                    if (result is null)
                    {
                        throw new InvalidOperationException("Failed to deserialize malware scan result data");
                    }
                    var processFunction = new Func<Task<OneOf<Task, Error>>>(() => handler.Process(result, cancellationToken));
                    var commandResult = await IdempotencyEventHelper.ProcessEvent(result.ETag, processFunction, _idempotencyEventRepository, cancellationToken);
                    return commandResult.Match(
                        Ok,
                        Problem
                    );*/

                }
            }

            return Ok();
        }
        private ObjectResult Problem(Error error) => Problem(detail: error.Message, statusCode: (int)error.StatusCode);
    }
}
