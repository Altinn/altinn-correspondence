using System.Net.Http.Json;
using System.Text.Json;
using System.Text;
using System.Net.Http.Headers;
using Altinn.Correspondence.API.Models.Enums;
using Altinn.Correspondence.API.Models;
using Altinn.Correspondece.Tests.Factories;

namespace Altinn.Correspondence.Tests;

public class MalwareScanResultControllerTests : IClassFixture<CustomWebApplicationFactory>
{
    private readonly CustomWebApplicationFactory _factory;
    private readonly HttpClient _senderClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;
    private readonly HttpClient _webhookClient;

    public MalwareScanResultControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = _factory.CreateClientInternal();
        _webhookClient = factory.CreateClient();
        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_Success()
    {
        // Initialize
        var fileId = await UploadAndCheckAttachment();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", fileId);
        await SendMalvareScanResult(jsonBody);
        // Get Scanned status
        var scannedFile = await GetattachmentWithNullAndOkCheck(fileId);
        Assert.True(scannedFile.Status == AttachmentStatusExt.Published);
        Assert.True(scannedFile.StatusText == "Published");
    }

    [Fact]
    public async Task MalwareScanFoundMaliciousSignature_Success()
    {
        // Initialize
        var attachmentId = await UploadAndCheckAttachment();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_Malicious.json", attachmentId);
        await SendMalvareScanResult(jsonBody);

        // Get scanned status
        var scannedFile = await GetattachmentWithNullAndOkCheck(attachmentId);
        Assert.True(scannedFile.Status == AttachmentStatusExt.Failed);
    }
    [Fact]
    public async Task MalwareScanCreatedOneChangeOnDuplicateEvents()
    {
        // Initialize
        var attachmentId = await UploadAndCheckAttachment();
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", attachmentId);

        // Send twice to check if it creates only one change
        var scannedattachmentDetailsBeforeScan = await _senderClient.GetFromJsonAsync<AttachmentDetailsExt>($"correspondence/api/v1/attachment/{attachmentId}/details", _responseSerializerOptions);
        await SendMalvareScanResult(jsonBody);
        await SendMalvareScanResult(jsonBody);
        var scannedattachmentDetailsAfterScan = await _senderClient.GetFromJsonAsync<AttachmentDetailsExt>($"correspondence/api/v1/attachment/{attachmentId}/details", _responseSerializerOptions);

        Assert.NotNull(scannedattachmentDetailsBeforeScan);
        Assert.NotNull(scannedattachmentDetailsAfterScan);
        Assert.True(scannedattachmentDetailsBeforeScan.StatusHistory.Count + 1 == scannedattachmentDetailsAfterScan.StatusHistory.Count);
    }

    [Fact]
    public async Task MalwareScanWebhookSubscription_OK()
    {
        // Webhook
        string jsonBody = File.ReadAllText("Data/WebHookSubscriptionValidationTest.json");
        var result = await SendMalvareScanResult(jsonBody);
        string rs = await result.Content.ReadAsStringAsync();
        Assert.Equal("{\"validationResponse\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\"}", rs);
    }


    private async Task<string> UploadAndCheckAttachment()
    {
        var initializeattachmentResponse = await _senderClient.PostAsJsonAsync("correspondence/api/v1/attachment", InitializeAttachmentFactory.BasicAttachment());
        Assert.True(initializeattachmentResponse.IsSuccessStatusCode, $"The request failed with status code {initializeattachmentResponse.StatusCode}. Error message: {await initializeattachmentResponse.Content.ReadAsStringAsync()}");
        var attachmentId = await initializeattachmentResponse.Content.ReadAsStringAsync();

        // Upload
        var uploadedFileBytes = Encoding.UTF8.GetBytes("This is the contents of the uploaded file");
        using (var content = new ByteArrayContent(uploadedFileBytes))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            var uploadResponse = await _senderClient.PostAsync($"correspondence/api/v1/attachment/{attachmentId}/upload", content);
            Assert.True(uploadResponse.IsSuccessStatusCode);
        }
        var attachmentAfterUpload = await GetattachmentWithNullAndOkCheck(attachmentId);
        Assert.True(attachmentAfterUpload.Status == AttachmentStatusExt.Published); // When running integration test this happens instantly as of now.
        return attachmentId;
    }
    private string GetMalwareScanResultJson(string filePath, string fileId)
    {
        string jsonBody = File.ReadAllText(filePath);
        var randomizedEtagId = Guid.NewGuid().ToString();
        jsonBody = jsonBody.Replace("--FILEID--", fileId);
        jsonBody = jsonBody.Replace("--ETAGID--", randomizedEtagId.ToString());
        return jsonBody;
    }
    private async Task<AttachmentOverviewExt> GetattachmentWithNullAndOkCheck(string attachmentId)
    {
        var attachment = await _senderClient.GetFromJsonAsync<AttachmentOverviewExt>($"correspondence/api/v1/attachment/{attachmentId}", _responseSerializerOptions);
        Assert.NotNull(attachment);
        return attachment;
    }
    private async Task<HttpResponseMessage> SendMalvareScanResult(string jsonBody)
    {
        var result = await _webhookClient.PostAsync("correspondence/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        Assert.True(result.IsSuccessStatusCode, $"The request failed with status code {result.StatusCode}. Error message: {await result.Content.ReadAsStringAsync()}");
        return result;
    }
}
