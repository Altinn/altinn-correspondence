using Altinn.Correspondence.API.Models.Enums;
using Altinn.Correspondence.Common.Constants;
using Altinn.Correspondence.Tests.Fixtures;
using Altinn.Correspondence.Tests.Helpers;
using System.Text;
using System.Text.Json;
using Moq;
using Hangfire;
using Altinn.Correspondence.Tests.Factories;
using Microsoft.Extensions.DependencyInjection;
using Altinn.Correspondence.Application.ExpireAttachment;
using Hangfire.Common;
using Hangfire.States;
using System.Net.Http.Json;

namespace Altinn.Correspondence.Tests.TestingFeature;

[Collection(nameof(CustomWebApplicationTestsCollection))]
public class MalwareScanResultControllerTests
{
    private readonly CustomWebApplicationFactory _factory;
    private readonly HttpClient _senderClient;
    private readonly JsonSerializerOptions _responseSerializerOptions;
    private readonly HttpClient _webhookClient;

    public MalwareScanResultControllerTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _senderClient = _factory.CreateClientWithAddedClaims(("scope", AuthorizationConstants.SenderScope));
        _webhookClient = factory.CreateClient();
        _responseSerializerOptions = new JsonSerializerOptions(new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        _responseSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_Success()
    {
        // Arrange
        var attachmentId = await AttachmentHelper.GetInitializedAttachment(_senderClient, _responseSerializerOptions);
        var uploadResponse = await AttachmentHelper.UploadAttachment(attachmentId, _senderClient);
        Assert.True(uploadResponse.IsSuccessStatusCode, await uploadResponse.Content.ReadAsStringAsync());
        
        // Act
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", attachmentId.ToString());
        await SendMalwareScanResult(jsonBody);

        // Assert
        var scannedFile = await AttachmentHelper.WaitForAttachmentStatusUpdate(_senderClient, _responseSerializerOptions, attachmentId, AttachmentStatusExt.Published);
        Assert.True(scannedFile.Status == AttachmentStatusExt.Published);
        Assert.True(scannedFile.StatusText == "Published");
    }

    [Fact]
    public async Task MalwareScanFoundMaliciousSignature_Success()
    {
        // Arrange
        var attachmentId = await AttachmentHelper.GetInitializedAttachment(_senderClient, _responseSerializerOptions);
        var uploadResponse = await AttachmentHelper.UploadAttachment(attachmentId, _senderClient);
        Assert.True(uploadResponse.IsSuccessStatusCode, await uploadResponse.Content.ReadAsStringAsync());
        
        // Act
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_Malicious.json", attachmentId.ToString());
        await SendMalwareScanResult(jsonBody);

        // Assert
        var scannedFile = await AttachmentHelper.WaitForAttachmentStatusUpdate(_senderClient, _responseSerializerOptions, attachmentId, AttachmentStatusExt.Failed);
        Assert.True(scannedFile.Status == AttachmentStatusExt.Failed);
    }

    [Fact]
    public async Task MalwareScanWebhookSubscription_OK()
    {
        // Webhook
        string jsonBody = File.ReadAllText("Data/WebHookSubscriptionValidationTest.json");
        var result = await SendMalwareScanResult(jsonBody);
        string rs = await result.Content.ReadAsStringAsync();
        Assert.Equal("{\"validationResponse\":\"512d38b6-c7b8-40c8-89fe-f46f9e9622b6\"}", rs);
    }

    public static string GetMalwareScanResultJson(string filePath, string fileId)
    {
        string jsonBody = File.ReadAllText(filePath);
        var randomizedEtagId = Guid.NewGuid().ToString();
        jsonBody = jsonBody.Replace("--FILEID--", fileId);
        jsonBody = jsonBody.Replace("--ETAGID--", randomizedEtagId.ToString());
        return jsonBody;
    }

    [Fact]
    public async Task MalwareScanFoundNoThreat_SchedulesExpireAttachmentJob()
    {
        // Arrange
        var hangfireBackgroundJobClient = new Mock<IBackgroundJobClient>();
        hangfireBackgroundJobClient.Setup(x => x.Create(
            It.IsAny<Job>(),
            It.IsAny<IState>()))
            .Returns("job-id-123");

        using var testFactory = new UnitWebApplicationFactory((IServiceCollection services) =>
        {
            services.AddSingleton(hangfireBackgroundJobClient.Object);
        });
        var senderClient = testFactory.CreateSenderClient();
        var webhookClient = testFactory.CreateClient();

        var init = new AttachmentBuilder()
            .CreateAttachment()
            .WithExpirationTime(DateTimeOffset.UtcNow.AddDays(15))
            .Build();

        var initializeAttachmentResponse = await senderClient.PostAsJsonAsync("correspondence/api/v1/attachment", init);
        Assert.True(initializeAttachmentResponse.IsSuccessStatusCode, await initializeAttachmentResponse.Content.ReadAsStringAsync());
        var attachmentId = await initializeAttachmentResponse.Content.ReadFromJsonAsync<Guid>();

        var uploadResponse = await AttachmentHelper.UploadAttachment(attachmentId, senderClient);
        Assert.True(uploadResponse.IsSuccessStatusCode, await uploadResponse.Content.ReadAsStringAsync());

        // Act
        var jsonBody = GetMalwareScanResultJson("Data/MalwareScanResult_NoThreatFound.json", attachmentId.ToString());
        await webhookClient.PostAsync("correspondence/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));

        // Assert
        hangfireBackgroundJobClient.Verify(x => x.Create(
            It.Is<Job>(job => job.Type == typeof(ExpireAttachmentHandler) && job.Method.Name == "Process"),
            It.IsAny<IState>()), Times.AtLeastOnce);
    }

    private async Task<HttpResponseMessage> SendMalwareScanResult(string jsonBody)
    {
        var result = await _webhookClient.PostAsync("correspondence/api/v1/webhooks/malwarescanresults", new StringContent(jsonBody, Encoding.UTF8, "application/json"));
        Assert.True(result.IsSuccessStatusCode, $"The request failed with status code {result.StatusCode}. Error message: {await result.Content.ReadAsStringAsync()}");
        return result;
    }
}
