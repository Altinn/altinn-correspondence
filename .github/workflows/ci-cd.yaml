name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
    - "Test/**" # ignore changes to tests

jobs:

  test:	
    name: QA	
    uses: ./.github/workflows/test-application.yml	

  get-version: 
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.get-version.outputs.imageTag }}
    permissions: 
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: "Get current version"
        uses: ./.github/actions/get-current-version
        id: get-version

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [get-version]
    permissions: 
      packages: write
      contents: read
    steps:        
      - uses: actions/checkout@v4
      - name: "Publish image"
        uses: ./.github/actions/publish-image
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          dockerImageBaseName: ghcr.io/altinn/altinn-correspondence
          imageTag: ${{ needs.get-version.outputs.imageTag }}

  deploy-test:
    name: Internal test
    needs: [get-version, publish]
    uses: ./.github/workflows/deploy-to-environment.yml
    if: always() && !failure() && !cancelled() 
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: test
      imageTag: ${{ needs.get-version.outputs.imageTag }}

  deploy-staging:
    name: Internal staging
    uses: ./.github/workflows/deploy-to-environment.yml
    if: always() && !failure() && !cancelled() 
    needs: [ 
      get-version,
      deploy-test
    ]
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: staging
      imageTag: ${{ needs.get-version.outputs.imageTag }}

  deploy-production:
    name: Production
    needs: [
      get-version,
      deploy-staging,
      ]
    uses: ./.github/workflows/deploy-to-environment.yml
    if: (!failure() && !cancelled())
    permissions: 
      id-token: write
      contents: read
      packages: write
    secrets: inherit
    with:
      environment: production
      imageTag: ${{ needs.get-version.outputs.imageTag }}

  release-to-git:  
    name: Release to git
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: ${{ !failure() && !cancelled()}}
    permissions: 
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Release
        if: (!failure() && !cancelled())
        uses: ./.github/actions/release-to-git
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
